#!/usr/bin/env bash

# Print a message and exit with error code 1
abort() {
    >&2 echo $1
    exit 1
}

# Show tool help
cmd_help() {
    echo "hkmu - Hackintosh maintenance utility"
    echo ""
    echo "USAGE"
    echo ""
    echo "    hkmu <command> [...]"
    echo ""
    echo "COMMANDS"
    echo ""
    echo "    backup     Backup the EFI partition (must be mounted)"
    echo "    disks      List disks and partitions"
    echo "    help       Show this usage message"
    echo "    info       Display system information"
    echo "    kexts      List loaded kernel extension IDs"
    echo "    mount      Mount the system EFI partition"
    echo "    unmount    Unmount the system EFI partition"
    echo ""

    exit 1
}

# Backup the EFI partition
cmd_backup() {
    if [ ! -d "/Volumes/EFI/EFI" ]; then
	abort "Error: EFI folder not found"
    fi

    file="efi$(date '+%y%m%d%H%M').tar.gz"
    tar -zcf ${file} -C /Volumes/EFI/EFI .

    echo "EFI backup saved to ${file}"
}

# List disks
cmd_disks() {
    diskutil list
}

# Show serial number, etc.
cmd_info() {
    if ! command -v jq &> /dev/null; then
	abort "Error: This command requires 'jq' (not found)"
    fi

    sys=$(system_profiler SPHardwareDataType SPSoftwareDataType -json)

    os=$(echo ${sys} | jq '.SPSoftwareDataType[0].os_version' --raw-output)
    kernel=$(echo ${sys} | jq '.SPSoftwareDataType[0].kernel_version' --raw-output)
    cpu=$(echo ${sys} | jq '.SPHardwareDataType[0].cpu_type' --raw-output)
    ram=$(echo ${sys} | jq '.SPHardwareDataType[0].physical_memory' --raw-output)
    model=$(echo ${sys} | jq '.SPHardwareDataType[0].machine_model' --raw-output)
    serial=$(echo ${sys} | jq '.SPHardwareDataType[0].serial_number' --raw-output)
    uuid=$(echo ${sys} | jq '.SPHardwareDataType[0].platform_UUID' --raw-output)

    echo "System:      ${os} [${kernel}]"
    echo "Hardware:    ${cpu}, ${ram}"
    echo "SMBIOS:      ${model} (${serial}) [${uuid}]"
}

# List active kernel extensions
cmd_kexts() {
    kmutil showloaded 2> /dev/null \
	| grep -v -e com.apple -e Index \
	| awk '{n=split($6,T,"."); print T[n]}'
}

# Mount the partition at diskXsY under /Volumes/EFI
cmd_mount() {
    if [ -z "$1" ] || [ -z "$2" ]; then
	abort "Usage: hkmu mount <disk> <partition>"
    fi

    if [ -d "/Volumes/EFI" ]; then
	abort "Error: Mount point /Volumes/EFI already exists"
    fi

    sudo mkdir /Volumes/EFI
    sudo mount -t msdos /dev/disk${1}s${2} /Volumes/EFI > /dev/null

    echo "EFI partition mounted at /Volumes/EFI"
}

# Unmount the volume at /Volumes/EFI
cmd_unmount() {
    if [ ! -d "/Volumes/EFI" ]; then
	abort "Error: Nothing mounted at /Volumes/EFI"
    fi

    diskutil unmount /Volumes/EFI > /dev/null

    echo "EFI partition unmounted"
}

cmd=$1
case ${cmd} in
    "" | "-h" | "--help")
	cmd_help
	;;
    *)
	shift
	type cmd_${cmd} &> /dev/null
	if [ $? -ne 0 ]; then
	    echo "Error: Invalid subcommand '$cmd'" >&2
	    abort "See 'hkmu help' for help and usage information"
	fi
	cmd_${cmd} $@
	;;
esac
